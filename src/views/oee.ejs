<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta http-equiv="x-ua-compatible" content="ie=edge">

  <title>ECI MES</title>

  <link rel="icon" href="./img/eci_logo.png">
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="./plugins/fontawesome-free/css/all.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="./css/adminlte.css">
  <!-- Google Font: Source Sans Pro  -->
  <link href="./css/googleFonts.css" rel="stylesheet">
  <!-- Ionicons -->
  <link rel="stylesheet" href="./css/ionicons.css">

  <!-- REQUIRED SCRIPTS -->

  <!-- jQuery -->
  <script src="./plugins/jquery/jquery.min.js"></script>
  <!-- Bootstrap 4  -->
  <script src="./plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
  <!-- AdminLTE App  -->
  <script src="./js/adminlte.min.js"></script>
  <!-- Moment.js -->
  <script src="./plugins/moment/moment-with-locales.js"></script>
  <!-- AMCHARTS LIB-->
  <script src="./js/charts/core.js"></script>
  <script src="./js/charts/charts.js"></script>
  <script src="./js/charts/animated.js"></script>

  <script src="./js/actTime.js"></script>
</head>

<body>
  <!-- REAL BODY -->
  <div class="content-wrapper m-0" style="min-height: 300px;">
    <div class="container-fluid pt-2">
      <div class="row" style="min-height: 50px;">
        <div class="col-12">
          <div class="row container-fluid p-2 mb-3 mx-0 rounded border bg-white">
            <img src="../img/eci_logo_big.png" style="max-height: 75px;">
            <div class="flex-grow-1">
              <div class="row">
                <h2 class="ml-4">
                  <%= locals.config.machineName %>
                </h2>
              </div>
              <div class="row">
                <h3 class="ml-4 " id="userName">
                  Operator: 
                  </h2>
                  <h3 id="actualDate" class="ml-auto mr-2">
                    </h2>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-6">
          <div class="info-box">
            <div class="info-box-content">
              <span class="info-box-text">
                <h2 id="stationPerformance">WYDAJNOŚĆ STANOWISKA</h2>
              </span>
              <span class="info-box-number">
                <h3 id="referenceNameAndDescription" class="mb-0">
                </h3>
              </span>
              <div class="chart" id="stationChartDiv">

              </div>
            </div>
          </div>
        </div>
        <div class="col-6">
          <div class="info-box">
            <div class="info-box-content">
              <span class="info-box-text">
                <h2 id="operatorPerformance">WYDAJNOŚĆ OPERATORA</h2>
              </span>
              <span class="info-box-number">
                <h3 id="referenceNameAndDescription" class="mb-0">
                </h3>
              </span>
              <div class="chart" id="operatorChartDiv">

              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-12">
          <div class="info-box">
            <div class="info-box-content">
              <div id="timelineChartDiv"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script>
    //Actual time
    setActDate()
    setInterval(setActDate, 1000)
    var oeePollingTimer;
    //Chart
    var stationChartDataTemplate = [{
      "state": "Praca",
      "time": 0
    }, {
      "state": "Przezbrojenie",
      "time": 0
    }, {
      "state": "Awaria",
      "time": 0
    }, {
      "state": "Postój",
      "time": 0
    }, {
      "state": "Brak operatora",
      "time": 0
    },]
    var operatorChartDataTemplate = [{

      "id": 0,
      "reference": "H111",
      "realTime": 0,
      "targetTime": 0,
      "overrunTime": 0
    }, {
      "id": 1,
      "reference": "H222",
      "realTime": 0,
      "targetTime": 0,
      "overrunTime": 0
    }, {
      "id": 2,
      "reference": "H333",
      "realTime": 0,
      "targetTime": 0,
      "overrunTime": 0
    },]
    var timelineChartDataTemplate = [
      {
        name: "",
        state: "Praca",
        fromTime: "2018-01-01 08:00",
        toTime: "2018-01-01 10:00",
        color: '#28a745'
      },
      {
        name: "",
        state: "Przezbrojenie",
        fromTime: "2018-01-01 12:00",
        toTime: "2018-01-01 15:00",
        color: '#ffc107'
      },
      {
        name: "",
        state: "Awaria",
        fromTime: "2018-01-01 15:30",
        toTime: "2018-01-01 21:30",
        color: '#dc3545'
      },
      {
        name: "",
        state: "Postój",
        fromTime: "2018-01-01 22:00",
        toTime: "2018-01-01 23:30",
        color: '#5a6268'
      },

    ];

    var stationPieChart = am4core.create("stationChartDiv", am4charts.PieChart)
    var operatorColumnChart = am4core.create("operatorChartDiv", am4charts.XYChart)
    var timelineChart = am4core.create("timelineChartDiv", am4charts.XYChart);

    function stationPieChartInit() {
      var pieSeries = stationPieChart.series.push(new am4charts.PieSeries());
      pieSeries.dataFields.value = "time";
      pieSeries.dataFields.category = "state";
      pieSeries.alignLabels = false;;
      pieSeries.labels.template.bent = true;
      var colorSet = new am4core.ColorSet();
      colorSet.list = ["#28a745", "#ffc107", "#dc3545", "#5a6268"].map(function (color) {
        return new am4core.color(color);
      });
      pieSeries.colors = colorSet;
      pieSeries.slices.template.stroke = am4core.color("#fff");
      pieSeries.slices.template.strokeWidth = 7;
      pieSeries.slices.template.strokeOpacity = 1;
      pieSeries.hiddenState.properties.opacity = 1;
      pieSeries.hiddenState.properties.endAngle = -90;
      pieSeries.hiddenState.properties.startAngle = -90;

      pieSeries.ticks.template.events.on("ready", hideSmall);
      pieSeries.ticks.template.events.on("visibilitychanged", hideSmall);
      pieSeries.labels.template.events.on("ready", hideSmall);
      pieSeries.labels.template.events.on("visibilitychanged", hideSmall);
      function hideSmall(ev) {
        if (ev.target.dataItem && (ev.target.dataItem.values.value.percent < 5 || ev.target.dataItem.values.value.percent == 100)) {
          ev.target.hide();
        }
        else {
          ev.target.show();
        }
      }
      stationPieChart.data = stationChartDataTemplate

    }
    function operatorChartInit() {
      var colorSet = new am4core.ColorSet();
      colorSet.list = ["#5a6268", "#28a745", "#dc3545"].map(function (color) {
        return new am4core.color(color);
      });
      operatorColumnChart.colors = colorSet;
      operatorColumnChart.zoomOutButton.disabled = true;
      operatorColumnChart.padding(25, 10, 15, 15);
      operatorColumnChart.legend = new am4charts.Legend();

      let categoryAxis = operatorColumnChart.xAxes.push(new am4charts.CategoryAxis());
      categoryAxis.dataFields.category = "id";

      categoryAxis.renderer.grid.template.location = 0;

      let TimeAxis = operatorColumnChart.yAxes.push(new am4charts.DurationAxis());
      TimeAxis.renderer.minWidth = 50;
      TimeAxis.title.text = "Czas (minuty)"
      TimeAxis.baseUnit = "second"

      let RealTimeSerie = addSerie("Aktualny czas", "realTime")
      let TargerTimeSerie = addSerie("Pozostały czas", "targetTime")
      let OverrunTimeSerie = addSerie("Czas przekroczenia", "overrunTime")

      function addSerie(Name, ValueY) {
        let Serie = operatorColumnChart.series.push(new am4charts.ColumnSeries());
        Serie.columns.template.width = am4core.percent(80);
        Serie.name = Name
        Serie.color = "red"
        Serie.dataFields.categoryX = "id";
        Serie.dataFields.valueY = ValueY;
        Serie.dataItems.template.locations.categoryX = 0.5;
        Serie.stacked = true;
        Serie.tooltip.pointerOrientation = "vertical";
        return Serie
      }
      operatorColumnChart.data = operatorChartDataTemplate
    }
    function timelineChartInit() {

      timelineChart.hiddenState.properties.opacity = 0; // this creates initial fade-in

      timelineChart.paddingRight = 30;
      timelineChart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";

      var categoryAxis = timelineChart.yAxes.push(new am4charts.CategoryAxis());
      categoryAxis.dataFields.category = "name";
      categoryAxis.renderer.grid.template.location = 0;
      categoryAxis.renderer.inversed = true;

      var dateAxis = timelineChart.xAxes.push(new am4charts.DateAxis());
      dateAxis.dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss";
      dateAxis.renderer.minGridDistance = 70;
      dateAxis.baseInterval = { count: 1, timeUnit: "second" };
      //dateAxis.max = new Date(2018, 0, 1, 24, 0, 0, 0).getTime();
      //dateAxis.strictMinMax = true;
      dateAxis.renderer.tooltipLocation = 0;

      var series1 = timelineChart.series.push(new am4charts.ColumnSeries());
      series1.columns.template.width = am4core.percent(80);
      series1.columns.template.tooltipText = "{state}: {openDateX} - {dateX}";

      series1.dataFields.openDateX = "fromTime";
      series1.dataFields.dateX = "toTime";
      series1.dataFields.categoryY = "name";
      series1.columns.template.propertyFields.fill = "color"; // get color from data
      series1.columns.template.propertyFields.stroke = "color";
      series1.columns.template.strokeOpacity = 1;

      timelineChart.data = timelineChartDataTemplate

    }
    
    stationPieChartInit()
    operatorChartInit()
    timelineChartInit()
    //Data polling
    function referencesDataPolling() {
      $.ajax({
        url: '/oee/referencesWithMachineStates',
        type: 'GET',
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
          let resJSON = JSON.parse(response)
          let references = resJSON.referencesWithStates
          let operatorChartData = []
          for (var i = 0; i < references.length; i++) {
            let actReference = references[i]
            let reference = {
              "id": i,
              "reference": actReference.reference,
              "realTime": 0,
              "targetTime": actReference.targetTime,
              "overrunTime": 0
            }
            let workSum = 0;
            for (var j = 0; j < actReference.machineStates.length; j++) {
              let actState = actReference.machineStates[j]
              let fromTime = new Date(actState.fromTime).getTime() / 1000
              let toTime = new Date(actState.toTime).getTime() / 1000
              if (actState.state == "Praca")
                workSum += toTime - fromTime;
            }
            reference.realTime = workSum;

            if (reference.realTime > reference.targetTime) {
              reference.overrunTime = reference.realTime - reference.targetTime
              reference.realTime = reference.targetTime
              reference.targetTime = 0;
            }
            else {
              reference.overrunTime = 0;
              reference.targetTime -= reference.realTime
            }
            operatorChartData.push(reference)
          }
          operatorColumnChart.data = operatorChartData
          //Calculate operator performance
          var operatorWorkTime = 0;
          var operatorTargetTime = 0
          var operatorPerformance;
          for (var i = 0; i < operatorChartData.length; i++) {
            operatorWorkTime += operatorChartData[i].realTime;
            operatorWorkTime += operatorChartData[i].overrunTime;

            operatorTargetTime += operatorChartData[i].realTime;
            operatorTargetTime += operatorChartData[i].targetTime;
          }
          operatorPerformance = (operatorTargetTime / operatorWorkTime * 100).toFixed(1)
          if (operatorPerformance == "NaN")
            operatorPerformance = "0.0"
          $('#operatorPerformance').text("WYDAJNOŚĆ OPERATORA: " + operatorPerformance + " %")


        },
        error: function (err) {
          console.log("Błąd: " + err)
        },
        timeout: 2000
      });
    }
    function machineStatesDataPolling() {
      $.ajax({
        url: '/oee/machineStates',
        type: 'GET',
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
          const resJSON = JSON.parse(response)
          const machineStates = resJSON.machineStates
          const stationChartData = JSON.parse(JSON.stringify(stationChartDataTemplate))
          const timelineChartData = []
          for (var i = 0; i < machineStates.length; i++) {
            //Piechart
            const fromTime = new Date(machineStates[i].fromTime).getTime()
            const toTime = new Date(machineStates[i].toTime).getTime()
            const time = Math.round((toTime - fromTime) / 1000)
            const indexOfState = stationChartData.findIndex(obj => obj.state == machineStates[i].state)
            stationChartData[indexOfState].time += time
            //Timeline chart
            const format = "YYYY-MM-DD HH:mm:ss"
            const timelineChartDataArr = timelineChartDataTemplate.filter(obj => obj.state === machineStates[i].state)

            if(timelineChartDataArr.length == 1)
            {
              const timelineChartDataObj = JSON.parse(JSON.stringify(timelineChartDataArr[0]))
              timelineChartDataObj.fromTime = moment(fromTime).format(format);
              timelineChartDataObj.toTime = moment(toTime).format(format);
              timelineChartData.push(timelineChartDataObj)
            }
          }
          stationPieChart.data = stationChartData;
          timelineChart.data = timelineChartData;
          let timeSum = 0;
          let workSum = 0;
          for (var i = 0; i < stationChartData.length; i++) {
            if (stationChartData[i].state == "Praca")
              workSum += stationChartData[i].time
            else
              timeSum += stationChartData[i].time
          }
          let stationPerformance = (workSum / (timeSum + workSum) * 100).toFixed(1)
          if (stationPerformance == "NaN")
            stationPerformance = "0.0"
          $('#stationPerformance').text("WYDAJNOŚĆ STANOWISKA: " + stationPerformance + " %")
        },
        error: function (err) {
          console.log("Błąd: " + err)
        },
        timeout: 2000
      });
    }
    function machineDataPolling() {
      $.ajax({
        url: '/machineData',
        type: 'GET',
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
          var machineData = JSON.parse(response)
          if (machineData.user != "") {
            $('#userName').text("Operator: " + machineData.user)
            setTimeout(referencesDataPolling, 0)
            setTimeout(machineStatesDataPolling, 0)
          }
          // else {
          //   StationPieChart.data = [{
          //     "State": "Brak operatora",
          //     "time": 1
          //   }]
          //   OperatorColumnChart.data = []
          // }

        },
        error: function (err) {
          console.log("Błąd: " + err)
        },
        complete: function () {
          setTimeout(machineDataPolling, 2000)
        },
        timeout: 2000
      });
    }
    machineDataPolling()
  </script>
  <style>
    h2 {
      text-align: center;
      margin-bottom: 0;
      font-weight: bold;
    }

    .chart {
      min-height: 40vw;
    }
  </style>
</body>